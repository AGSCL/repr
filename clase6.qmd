---
title: "Clase 6: Máquinas virtuales, Contenedores y GitHub"
date: last-modified
date-format: "D [d]e MMM, YYYY"
author: "Andrés González-Santa Cruz"
subtitle: "Diplomado en Data Science para las Ciencias Sociales" #CUIDADO CON TILDES
institute: "Estudiante Doctorado en Salud Pública, Investigador joven, nDP"
format: 
  revealjs:
    theme: "mylibs/theme2.scss"
    transition: slide
    css: 
      - mylibs/animate.min.css
      - mylibs/ninjutsu.css
      - mylibs/theme2.css #en verdad lo necesita
      - mylibs/custom.css #con cuestiones de titulo
      - mylibs/logo.css
    width: 1600
    height: 900      
    fig-cap-location: top
    lightbox: auto
    lang: es
    slide-number: true
    incremental: true
    self-contained: true # Embeds all assets locally
    navigation-mode: linear # Disable scroll-based navigation
    logo: "_style/cropped-logotipo_fsch.png"
    ratio: 16:9 # Slide aspect ratio
    include-after-body: 
      - mylibs/collapseoutput.js
      - mylibs/zoom.html
      - mylibs/timer.html
    pdf-export: true # Enable PDF export
    code-fold: true
    code-summary: "expandir para código"
editor: source
engine: knitr
---

## Recordemos

```{r}
#| include: false
#| code-fold: true
#| fig-align: "center"
#| warnings: false
#| message: false
#| results: hide

rm(list=ls());gc()

if(!require(showtext)){install.packages("showtext")}
if(!require(ggplot2)){install.packages("ggplot2")}
if(!require(magick)){install.packages("magick")}
if(!require(knitr)){install.packages("knitr")}


# Activar showtext
showtext_auto()

# Agregar la fuente Oswald desde Google Fonts
font_add_google(name = "Oswald", family = "Oswald")
```


```{r}
#| echo: true
#| code-fold: true
#| code-summary: "expandir para código"
#| fig-align: "center"
#| warnings: false
#| message: false
#| results: hide
#| fig.showtext: true
#| fig.cap: "Esquema"

library(ggplot2)

# Crear los datos
data <- data.frame(
  xstart = c(0, 0.2, 0.4, 0.6, 0.8),
  xend = c(0.2, 0.4, 0.6, 0.8, 1),
  ystart = rep(0, 5),
  yend = rep(1, 5),
  labels = c("Solo publicación", "Código", "Código y datos",
             "Código y datos\nejecutables", "Replicación\ncompleta")
)

# Colores personalizados desde oscuro a claro
#colors <- c("#555555", "#777777", "#999999", "#bbbbbb", "#dddddd")
colors <- c("#4D4D4D", "#B03A2E", "#E74C3C", "#F1948A", "#FADBD8")

# Crear el gráfico
ggplot() +
  # Dibujar las áreas
    geom_rect(data = data, aes(xmin = xstart, xmax = xend, ymin = ystart, ymax = yend, fill = labels), color = NA) +
  scale_fill_manual(values = colors) +
  # Agregar las etiquetas dentro de las áreas
  geom_text(data = data, aes(x = (xstart + xend) / 2, y = 0.5, label = labels), size = 6, family = "Oswald", color = "black") +
  # Agregar flecha de reproducibilidad
  annotate("segment", x = 0, xend = 1, y = -0.1, yend = -0.1, arrow = arrow(type = "closed", ends = "both"), color = "gray") +
  annotate("text", x = 0.1, y = -0.15, label = "No\nreproducible", size = 5, hjust = 0.5, color = "#555555") +
  annotate("text", x = .9, y = -0.15, label = "Estándar\nde oro", size = 5, hjust = 0.5, color = "#555555") +
  # Ajustar límites y tema
  scale_x_continuous(limits = c(0, 1), expand = c(0, 0)) +
  scale_y_continuous(limits = c(-0.2, 1), expand = c(0, 0)) +
  theme_void() +
  theme(
    legend.position = "none",
    text = element_text(family = "Oswald"),
    plot.background = element_rect(fill = "#ffffff", color = NA)
  )

```

## Máquinas virtuales / Contenedores {.nonincremental}

:::: {.columns}

::: {.column width="50%"}
```{r}
#| fig.cap: "Alcances de cada plataforma"
magick::image_read(path = "_figs/container.png")
```

<div style="text-align: center; font-size: small; font-style: italic;"> Fuente: <a href="https://frederikaust.com/reproducible-research-practices-workshop/slides/7_Other_Topics.html#63" target="_blank">Reproducible research workflows for psychologists</a> </div>

:::

::: {.column width="50%"}

::: {.nonincremental}
- **Docker**, contenedor, existe  [Docker Desktop](https://www.docker.com/products/docker-desktop/).

-  **Rocker** (Docker para entornos R) [enlace](https://rocker-project.org/)

- Otras alternativas: [DataLab](https://www.datacamp.com/datalab/sign_in), [Code Ocean](https://codeocean.com/), [Kaggle Notebooks](https://www.kaggle.com/code/); [JupyterLab](https://jupyter.org/try-jupyter/lab/) ([Ver tutorial](https://docs.ncsa.illinois.edu/systems/delta/en/latest/user_guide/ood/custom-r.html)), [VirtualBox](https://www.osboxes.org/lubuntu/#lubuntu-24-04-info)

```{r }
#| out-width: "10%"
magick::image_colorize(magick::image_read(path = "_figs/datalab.png"),35,"white")
```
```{r }
#| out-width: "10%"
magick::image_colorize(magick::image_read(path = "_figs/kaggle_notebook.png"),35,"white")
```

:::
:::

::::

::: {.notes}
`r invisible("#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#")`
- Las máquinas virtuales virtualizan a nivel de hardware, todo el sistema operativo; por ej., VirtualBox, permite tener un SO desde 0, en el que hay que instalarle R, etc. Este SO debiese quedarse igual hasta 2090, siempre que no le actualicemos los paquetes estadísticos de R adentro, etc. Es un paso tan largo que no vale la pena que les explique cómo generar este SO virtual. Mejor saber que existe y los interesad@s me contactarán posteriormente.

- En la imagen vemos los alcances de cada plataforma.

- Muchos utilizan diversios servicios de computación en línea
¿Quiénes son verdaderas VMs?
VirtualBox: Sí, es una herramienta para crear máquinas virtuales completas.
Saturn Cloud, Posit Cloud: Utilizan VMs en el backend, pero no son VMs desde el punto de vista del usuario.
¿Quiénes no son VMs?
Google Colab y Code Ocean: Utilizan contenedores, no VMs completas.

- **Docker**: CONTENEDOR. Al encapsular R, sus paquetes y las dependencias del sistema dentro de un contenedor, se garantiza que el entorno de desarrollo, prueba y producción sea idéntico. Esto reduce problemas comunes de incompatibilidad entre sistemas operativos, versiones de paquetes o librerías del sistema.

- El proyecto **Rocker** ofrece contenedores Docker listos para usar con R, diseñados para garantizar entornos reproducibles, portables y consistentes, ideales para desarrollo, pruebas y colaboración en ciencia de datos. Cada imagen que tiene un R o Rstudio Server ya preinstalado para que sea más fácil. A veces se pueden correr en servidores externos (sujeto a pagar, claro)

<!----
#Press the S key (or use the Navigation Menu) to show the presentation speaker view:
---->
:::

<!----

#https://quarto.org/docs/presentations/revealjs/presenting.html

rm(list=ls());gc()

if(!require(tidyverse)){install.packages("tidyverse")}
if(!require(janitor)){install.packages("janitor")}

load("~/workspace/ejemplo_datos.RData")

surveymonkey_accionsalududp_df2_cor_table |>
  janitor::tabyl(tamizaje_ans, p19_contr_cont_nieg_epp_rec) |>
  janitor::adorn_percentages("col") |>
  janitor::adorn_pct_formatting(digits = 1) # Opcional: formatea los porcentajes con 1 decimal

---->

## Colab

- [Enlace](https://colab.research.google.com/)

- [Datos](https://github.com/AGSCL/repr/raw/master/data/ejemplo_datos.RData)

::: {.panel-tabset}

### Paso 1

#### Entramos

```{r}
image_colorize(image_read(path = "_figs/colab1.png"),35,"white")
```

### Paso 2

#### Cambiamos el entorno de ejecución (1)

```{r}
image_colorize(image_read(path = "_figs/colab2.png"),35,"white")
```

### Paso 3

#### Cambiamos el entorno de ejecución (2)

```{r}
image_colorize(image_read(path = "_figs/colab3.png"),35,"white")
```

### Paso 4

#### Desplegamos el código (1)

```{r}
image_colorize(image_read(path = "_figs/colab4.png"),35,"white")
```

### Paso 5

#### Desplegamos el código (2)

```{r}
image_colorize(image_read(path = "_figs/colab5.png"),35,"white")
```

:::

::: {.notes}
`r invisible("#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#")`
- Google Colab en general es muy útil para bases de datos pequeñas
- Google Colab no utiliza máquinas virtuales completas, sino contenedores (generalmente Docker) que aíslan los procesos
- Las opciones Pro tienen un pay as you go (es usar instancias de computación contra pago. Es medio caro)
- Calcule cuánto consume su computador y la hora de computación y en función de eso haga la compra
- Lo vieron con René
- Permite conectarse con Github

:::

## Saturn Cloud

- [ENLACE](https://saturncloud.io/)

::: {.panel-tabset}

### Paso 1

#### Entramos

```{r}
magick::image_colorize(magick::image_read(path = "_figs/saturn_cloud1.png"),35,"white")
```
### Paso 2

#### Definimos parámetros, etc.

```{r}
magick::image_colorize(magick::image_read(path = "_figs/saturn_cloud2.png"),35,"white")
```
### Paso 3

#### Elegimos recursos a utilizar

```{r}
magick::image_colorize(magick::image_read(path = "_figs/saturn_cloud3.png"),35,"white")
```
### Paso 4

#### Desplegamos el entorno

```{r}
magick::image_colorize(magick::image_read(path = "_figs/saturn_cloud4.png"),35,"white")
```
### Paso 5

#### Una vez cargado, corremos el entorno

```{r}
magick::image_colorize(magick::image_read(path = "_figs/saturn_cloud5.png"),35,"white")
```
### Paso 6

#### Subimos los datos

```{r}
magick::image_colorize(magick::image_read(path = "_figs/saturn_cloud6.png"),35,"white")
```

### Paso 7

#### Generamos los mismos resultados

```{r}
magick::image_colorize(magick::image_read(path = "_figs/saturn_cloud7.png"),35,"white")
```

:::

::: {.notes}
`r invisible("#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#")`
- Aunque no es una VM en sí misma, Saturn Cloud utiliza VMs o contenedores como Docker en su backend para ejecutar entornos aislados.
- Los usuarios no interactúan directamente con una VM completa, sino con un entorno preconfigurado para análisis de datos. (Se le llama una infraestructura de servicio en la nube)
- Decir que hay que fijarse en no usar las opciones Pro (van asociadas a pago)
- Fijarse en que uno antes de iniciar la instancia puede indicar los paquetes a instalar
- Mencionar lo del SSH a la pasada
- SIEMPRE FIJESE DE HABER CERRADO LA SESION. PORQUE SI PAGA LE PUEDE SALIR MUY CARO

:::

## Posit Cloud


::: {.panel-tabset}

### Paso 1

- [Enlace](https://posit.cloud/)

#### Entramos y generamos un nuevo proyecto

```{r}
magick::image_colorize(magick::image_read(path = "_figs/posit_cloud1.png"),35,"white")
```

### Paso 2

#### Subimos los datos

```{r}
magick::image_colorize(magick::image_read(path = "_figs/posit_cloud2.png"),35,"white")
```

### Paso 3

#### Abrimos los datos

```{r}
magick::image_colorize(magick::image_read(path = "_figs/posit_cloud3.png"),35,"white")
```

### Paso 4

#### Desplegamos el código

```{r}
magick::image_colorize(magick::image_read(path = "_figs/posit_cloud4.png"),35,"white")
```

:::

::: {.notes}
`r invisible("#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#")`
el usuario solo interactúa con un entorno virtualizado diseñado para ejecutar RStudio y análisis en R.
- principalmente centrado en R
- ojo que no siempre está disponible la última versión de R (aunque creo que eso ocurre también con los otros)
- ojo que de todas formas, en todos los otros, es necesario utilizar un control de las versiones d elos paquetes. De lo contrario, el entorno de trabajo no será estable e irá cambiando. Basta con que un paquete estadísitco se actualice o sus dependencias para que su proyecto deje de ser reproducible. Por ejemplo, yo usé `long_panel` mucho tiempo. El problema es que meses después intento volver a desplegar mi código y me encuentro con que el paquete se había actualizado, y ahora pedía otros argumentos distintos  alos que había puesto (o en otro formato). Entonces no me corrría.
- al abrir los datos, podemos ver su ubicación.
- ojo con los recursos. En este caso vienen por defecto, pero son MUY limitados.
:::

## GitHub


<div style="text-align: center;">
  <video width="640" height="360" controls autoplay>
    <source src="_figs/github_first_time.mp4" type="video/mp4">
    Your browser does not support the video tag.
  </video>
</div>

## Github actions

::: {.notes}
`r invisible("#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#")`
- Presentar mi problema
- Se le define como un runner, que ejecuta flujos de trabajo en maquinas virtuales de Azure (Microsoft). 
- Es menos (pero menos complicado) que un contenedor, porque despliega trabajos (ej., )
- Tiene los siguientes SO's: Ubuntu: ubuntu-latest, ubuntu-20.04, etc. / Windows: windows-latest, windows-2019, etc. / macOS: macos-latest, macos-11, etc.
- Se despliega en archivos YAML [enlace](https://github.com/AGSCL/proc_seleccion/blob/main/.github/workflows/main.yml)

- **1era**: Hacemos click en new notebook. Notebook, que es.

:::

<!----
#https://quarto.org/docs/presentations/revealjs/presenting.html
#Explicar cómo aprendí GitHUb: https://fondecytacc.github.io/paperestallido/
---->

<!-- SSH!!! -->
<!-- Saturn Cloud, Rstudio Cloud, Github Actions, entre otras. -->
<!-- -	Mi primer repositorio GitHub -->
<!-- - -	Contexto: control de versiones -->
<!-- - -	Flujo de trabajo -->
<!-- - -	Elementos -->
<!-- - -	Acciones -->
<!-- - -	GitHub Pages -->

<!-- - -	Mostrar potencialidades GitHub, GitHub actions: nowcasting-->
<!-- https://agscl.github.io/proc_seleccion/poster.html -->
<!-- https://agscl.github.io/proc_seleccion/proy_proc_sel.html -->
<!-- https://github.com/AGSCL/proc_seleccion/blob/main/.github/workflows/main.yml -->

## Fuentes

- Breuer, J., & Aust, F. (2022, 27-28 de Abril). Reproducible research workflows for psychologists: Other topics in reproducible research [Presentation]. KU Leuven. Obtenido desde: https://frederikaust.com/reproducible-research-practices-workshop/slides/7_Other_Topics.html


